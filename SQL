create table dept		
(		
deptno number,		
deptname varchar2(20),		
loc varchar2(20)		
);	

insert into dept values (10,'Accounting','New York');
insert into dept values (20,'Research','New Jersey');
insert into dept values (30,'Sales','Dallas');
insert into dept values (40,'Operations','Chicago');

select * from dept;

CREATE TABLE EMP (
 EMPNO               NUMBER(4),
 ENAME               VARCHAR2(10),
 JOB                 VARCHAR2(9),
 MGR                 NUMBER(4) ,
 HIREDATE            DATE,
 SAL                 NUMBER(7,2),
 COMM                NUMBER(7,2),
 DEPTNO              NUMBER(2) NOT NULL
 );

INSERT INTO EMP VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-81',5000,NULL,10);
INSERT INTO EMP VALUES (7698,'BLAKE','MANAGER',7839,'1-MAY-81',2850,NULL,30);
INSERT INTO EMP VALUES (7782,'CLARK','MANAGER',7839,'9-JUN-81',2450,NULL,10);
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,'2-APR-81',2975,NULL,20);
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-81',1250,1400,30);
INSERT INTO EMP VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-81',1600,300,30);
INSERT INTO EMP VALUES (7844,'TURNER','SALESMAN',7698,'8-SEP-81',1500,0,30);
INSERT INTO EMP VALUES (7900,'JAMES','CLERK',7698,'3-DEC-81',950,NULL,30);
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO EMP VALUES (7902,'FORD','ANALYST',7566,'3-DEC-81',3000,NULL,20);
INSERT INTO EMP VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO EMP VALUES (7788,'SCOTT','ANALYST',7566,'09-DEC-82',3000,NULL,20);
INSERT INTO EMP VALUES (7876,'ADAMS','CLERK',7788,'12-JAN-83',1100,NULL,20);
INSERT INTO EMP VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);

select * from emp;
SELECT * FROM EMP;
SEleCt * fRoM eMp where job='MANAGER' or job='SALESMAN' or job='ANALYST'
SEleCt * fRoM eMp where job in ('MANAGER' ,'SALESMAN' ,'ANALYST')

SELECT * FROM EMP WHERE EMPNO=7839;
SELECT * FROM EMP WHERE DEPTNO=10;
SELECT * FROM EMP WHERE DEPTNO=20;
SELECT * FROM EMP WHERE DEPTNO=30;

SELECT * FROM EMP WHERE ENAME='KING';

SELECT * FROM EMP WHERE JOB='manager';

SELECT * FROM EMP WHERE SAL = 3000

SELECT * FROM EMP WHERE SAL >= 1500
SELECT * FROM EMP WHERE SAL <= 3000
SELECT * FROM EMP WHERE SAL >= 1500 AND SAL<=3000
SELECT * FROM EMP WHERE SAL BETWEEN 1500 AND 3000

SELECT * FROM EMP;
select * from emp where ename='JONES';
select * from emp where mgr=7698
SELECT * FROM EMP WHERE MGR IS NOT NULL;

SELECT * FROM EMP WHERE MGR IS  NULL;
SELECT * FROM EMP WHERE COMM IS NULL
SELECT* FROM EMP WHERE COMM=NULL;

SELECT * FROM EMP WHERE ENAME LIKE 'M%'

SELECT * FROM EMP WHERE JOB LIKE 'MAN%'
SELECT * FROM EMP WHERE JOB LIKE '%MAN'

SELECT * FROM EMP WHERE ENAME LIKE '__R%'

SELECT * FROM EMP WHERE ENAME LIKE '____'

SELECT * FROM EMP WHERE ENAME LIKE '%R';

SELECT * FROM EMP WHERE HIREDATE = '03-DEC-81';
SELECT * FROM EMP WHERE HIREDATE >=  '01-JAN-81' and hiredate<='30-JUN-81' ;
SELECT * FROM EMP WHERE HIREDATE between '01-JAN-81' and '30-MAR-81' ;

#SINGLE ROW FUNCTIONS

SELECT MAX(SAL) FROM EMP
SELECT MIN(SAL) FROM EMP
SELECT AVG(SAL) FROM EMP

SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME) FROM EMP;

SELECT EMPNO,ENAME, HIREDATE FROM EMP;

SELECT EMPNO,ENAME, HIREDATE, TO_CHAR(HIREDATE,'DD-MM-YYYY') FROM EMP;
SELECT EMPNO,ENAME, HIREDATE, TO_CHAR(HIREDATE,'YYYY-MM-DD') FROM EMP;
SELECT EMPNO,ENAME, HIREDATE, TO_CHAR(HIREDATE,'YYYY-MM-MONTH-MON-DDD-DD-D-DY-DAY HH:MI:SS') FROM EMP;

SELECT EMPNO,ENAME, HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'MON')='DEC';
SELECT EMPNO,ENAME, HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'MON-YY')='DEC-81';
SELECT EMPNO,ENAME, HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'MON/YY')='DEC/80';
SELECT EMPNO,ENAME, HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'MON YY')='DEC 82';

SELECT 100+20  FROM EMP WHERE EMPNO=7839

CREATE TABLE DUMMY
(
  X NUMBER
);
INSERT INTO DUMMY VALUES (1);

SELECT * FROM DUMMY

SELECT 100+20  FROM DUMMY

SELECT TO_CHAR(SYSDATE,'DD-MM-YYYY-HH24:MI:SS') FROM DUMMY




SELECT EMPNO,ENAME, HIREDATE FROM EMP WHERE HIREDATE='DEC';

CREATE TABLE EMP (
 EMPNO               NUMBER(4),
 ENAME               VARCHAR2(10),
 JOB                 VARCHAR2(9),
 MGR                 NUMBER(4) ,
 HIREDATE            DATE,
 SAL                 NUMBER(7,2),
 COMM                NUMBER(7,2),
 DEPTNO              NUMBER(2) NOT NULL
 );

INSERT INTO EMP VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-81',5000,NULL,10);
INSERT INTO EMP VALUES (7698,'BLAKE','MANAGER',7839,'1-MAY-81',2850,NULL,30);
INSERT INTO EMP VALUES (7782,'CLARK','MANAGER',7839,'9-JUN-81',2450,NULL,10);
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,'2-APR-81',2975,NULL,20);
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-81',1250,1400,30);
INSERT INTO EMP VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-81',1600,300,30);
INSERT INTO EMP VALUES (7844,'TURNER','SALESMAN',7698,'8-SEP-81',1500,0,30);
INSERT INTO EMP VALUES (7900,'JAMES','CLERK',7698,'3-DEC-81',950,NULL,30);
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO EMP VALUES (7902,'FORD','ANALYST',7566,'3-DEC-81',3000,NULL,20);
INSERT INTO EMP VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO EMP VALUES (7788,'SCOTT','ANALYST',7566,'09-DEC-82',3000,NULL,20);
INSERT INTO EMP VALUES (7876,'ADAMS','CLERK',7788,'12-JAN-83',1100,NULL,20);
INSERT INTO EMP VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);


SELECT COUNT(*) FROM EMP 
SELECT COUNT(*) FROM EMP WHERE JOB='MANAGER';

SELECT SUM(SAL) FROM EMP 

SELECT COUNT(COMM) FROM EMP;

SELECT * FROM EMP ORDER BY JOB

SELECT * FROM EMP ORDER BY HIREDATE 

SELECT * FROM EMP ORDER BY HIREDATE DESC

SELECT * FROM EMP ORDER BY SAL
SELECT * FROM EMP ORDER BY COMM

SELECT * FROM EMP ORDER BY JOB,SAL
SELECT * FROM EMP ORDER BY JOB DESC ,SAL DESC
SELECT * FROM EMP ORDER BY JOB DESC ,SAL ASC


SELECT JOB FROM EMP ORDER BY JOB


SELECT DISTINCT JOB, COUNT(JOB) FROM EMP

SELECT COUNT(JOB),SUM(SAL),JOB FROM EMP GROUP BY JOB


# COLUMN MENTIONED IN THE GROUP BY MAY/MAYNOT COME IN THE SELECT LIST
# BUT COLUMNS MENTIONED IN THE SELECT QUERY MUST BE MENTIONED BY THE GROUP BY CLAUSE


SELECT COUNT(JOB),JOB FROM EMP GROUP BY JOB
SELECT COUNT(JOB) FROM EMP GROUP BY JOB

SELECT COUNT(JOB),JOB,SAL FROM EMP GROUP BY JOB,SAL ORDER BY JOB

SELECT * FROM EMP ORDER BY DEPTNO

SELECT COUNT(JOB), MIN(SAL),MAX(SAL) FROM EMP 

SELECT COUNT(JOB), MIN(SAL),MAX(SAL),DEPTNO FROM EMP GROUP BY (DEPTNO)



SELECT COUNT(JOB),DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(JOB) > 5

SELECT COUNT(JOB),DEPTNO FROM EMP HAVING COUNT(JOB) > 5


SELECT COUNT(JOB),DEPTNO,JOB FROM EMP 
WHERE DEPTNO=20 
GROUP BY DEPTNO,JOB 
HAVING COUNT(JOB)>1
ORDER BY JOB


SELECT JOB FROM EMP

# NESTED QUERIES

SELECT * FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='ACCOUNTING')
SELECT * FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS')
SELECT * FROM DEPT WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME='WARD')

SELECT * FROM EMP WHERE DEPTNO=30.  # WARD'S EMPNO IS 7521,    TURNER IS 7844,  ALLEN 7499,  MARTIN 7654

SELECT * FROM CUSTOMER


SELECT * FROM CUSTOMER WHERE REPID = (SELECT EMPNO FROM EMP WHERE ENAME='WARD')

SELECT EMPNO FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='SALES') AND JOB='SALESMAN'
SELECT EMPNO FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC='CHICAGO') AND JOB='SALESMAN'

SELECT * FROM CUSTOMER WHERE REPID IN (SELECT EMPNO FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='SALES') AND JOB='SALESMAN' AND EMPNO=7844)

SELECT * FROM CUSTOMER WHERE REPID IN (SELECT EMPNO FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC='CHICAGO') AND JOB='SALESMAN' AND EMPNO=7844)

SELECT * FROM CUSTOMER WHERE REPID IN (SELECT EMPNO FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC='CHICAGO') AND EMPNO=7654)

#ORDER PLACED BY MARTIN'S CUSTOMER


SELECT * FROM CUSTOMER WHERE REPID = (SELECT EMPNO FROM EMP WHERE ENAME='MARTIN')

SELECT * FROM EMP WHERE JOB='PRESIDENT';

SELECT * FROM ORD WHERE CUSTID=102
SELECT MAX(TOTAL) FROM ORD WHERE CUSTID=(SELECT CUSTID FROM CUSTOMER WHERE REPID = (SELECT EMPNO FROM EMP WHERE ENAME='MARTIN')) // 23940

SELECT MAX(TOTAL) FROM ORD WHERE CUSTID IN(SELECT CUSTID FROM CUSTOMER WHERE REPID IN (SELECT EMPNO FROM EMP WHERE ENAME='WARD')) //8324

SELECT MAX(TOTAL) FROM ORD WHERE CUSTID IN(SELECT CUSTID FROM CUSTOMER WHERE REPID IN (SELECT EMPNO FROM EMP WHERE ENAME='ALLEN'))  //5860

SELECT MAX(TOTAL) FROM ORD WHERE CUSTID IN(SELECT CUSTID FROM CUSTOMER WHERE REPID IN (SELECT EMPNO FROM EMP WHERE ENAME='TURNER')) //46370

SELECT ORDID FROM ORD WHERE CUSTID=(SELECT CUSTID FROM CUSTOMER WHERE REPID = (SELECT EMPNO FROM EMP WHERE ENAME='MARTIN')) AND ORDID=614

SELECT * FROM ITEM WHERE ORDID=614

SELECT 15540 + 2800 + 5600 FROM EMP WHERE EMPNO=7839

SELECT * FROM ITEM WHERE ORDID IN 
            (SELECT ORDID FROM ORD WHERE CUSTID=
                (SELECT CUSTID FROM CUSTOMER WHERE REPID = 
                    (SELECT EMPNO FROM EMP WHERE ENAME='MARTIN'))) 
AND ORDID=614

SELECT * FROM PRODUCT

SELECT * FROM PRODUCT WHERE PRODID IN 
        ( SELECT PRODID FROM ITEM WHERE ORDID IN 
            (SELECT ORDID FROM ORD WHERE CUSTID=
                (SELECT CUSTID FROM CUSTOMER WHERE REPID = 
                    (SELECT EMPNO FROM EMP WHERE ENAME='MARTIN')))
AND ORDID=614)

 //100860 100870 100871
 
 //PRODUCTS ORDERED BY WARD,  ALLEN,  TURNER
 
 SELECT * FROM PRICE
 
# JOINS 

# JOINING COLUMNS FROM MULTIPLE TABLES


SELECT * FROM DEPT
SELECT * FROM EMP

SELECT ENAME, DNAME FROM DEPT

CREATE TABLE A
(
   X NUMBER
);
INSERT INTO A VALUES (1);
INSERT INTO A VALUES (2);
INSERT INTO A VALUES (3);

CREATE TABLE B
(
   Y NUMBER
);
INSERT INTO B VALUES (10);
INSERT INTO B VALUES (20);
INSERT INTO B VALUES (30);
INSERT INTO B VALUES (40);
INSERT INTO B VALUES (50);

CREATE TABLE C
(
   Z NUMBER
);
INSERT INTO C VALUES (100);
INSERT INTO C VALUES (200);
INSERT INTO C VALUES (300);
INSERT INTO C VALUES (400);
INSERT INTO C VALUES (500);
INSERT INTO C VALUES (600);
INSERT INTO C VALUES (700);


SELECT * FROM A // 3
SELECT * FROM B // 5
SELECT * FROM C // 7

SELECT * FROM A,B,C


DELETE FROM C WHERE Z=500

DELETE FROM A WHERE X=2 OR X=3
DELETE FROM B WHERE Y=30

#1. CARTESION PRODUCT = NATURAL JOIN
#2. EQUI JOIN   BASED ON A EQUALITY CONDITION
#3. NON EQUI JOIN
#4. OUTER JOIN
        - RIGHT OUTER
        - LEFT OUTER
        - FULL OUTER
        
#5. SELF JOIN


#EQUI JOIN
SELECT * FROM DEPT, EMP WHERE DEPT.DEPTNO = EMP.DEPTNO ORDER BY EMP.DEPTNO

SELECT ENAME 
||' IS WORKING IN '|| DNAME 
||' AT '||  LOC 
|| ' AS ' || JOB 
|| ' EARNING $' || SAL  
FROM DEPT, EMP 
WHERE DEPT.DEPTNO = EMP.DEPTNO 
ORDER BY EMP.DEPTNO


SELECT * FROM SALGRADE

SELECT * FROM EMP

#NON EQUI JOIN

SELECT ENAME, SAL, GRADE FROM EMP, SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL


# OUTER JOIN - FOR UN MATCHED RECORDS

SELECT * FROM DEPT

SELECT * FROM EMP

#EQUI JOIN OR INNER JOIN = EQUALITY CONDITION IS USED
SELECT * FROM DEPT,EMP
WHERE DEPT.DEPTNO = EMP.DEPTNO ORDER BY DEPT.DEPTNO


# ANSI SQL SYNTAX

# INNER JOIN (EQUI JOIN)
SELECT * FROM DEPT INNER JOIN EMP 
ON DEPT.DEPTNO = EMP.DEPTNO
ORDER BY DEPT.DEPTNO

# LEFT OUTER JOIN - UM MATCHED RECORDS FROM THE LEFT TABLE AND MATCHED RECORDS FROM THE RIGHT TABLE
SELECT * FROM DEPT LEFT OUTER JOIN EMP 
ON DEPT.DEPTNO = EMP.DEPTNO
ORDER BY DEPT.DEPTNO


# RIGHT OUTER JOIN - ALL RECORDS FROM THE RIGHT TABLE AND MATCHED RECORDS FROM THE LEFT TABLE
SELECT * FROM DEPT RIGHT OUTER JOIN EMP 
ON DEPT.DEPTNO = EMP.DEPTNO
ORDER BY DEPT.DEPTNO

# FULL OUTER JOIN - ALL RECORDS FROM THE RIGHT TABLE AND  FROM THE LEFT TABLE
SELECT * FROM DEPT FULL OUTER JOIN EMP 
ON DEPT.DEPTNO = EMP.DEPTNO
ORDER BY DEPT.DEPTNO

# SELF JOIN - TABLE JOINING ITSELF


SELECT * FROM EMP

SELECT * FROM EMP M, EMP W
WHERE M.EMPNO = W.MGR

SELECT M.ENAME 
|| ' IS WORKING AS ' || M.JOB 
|| ' AND ' || W.ENAME || ' IS REPORTING TO HIM AS ' || W.JOB
FROM EMP M, EMP W
WHERE M.EMPNO = W.MGR



SELECT DNAME, ENAME, NAME, O.ORDID, ORDERDATE, TOTAL, ACTUALPRICE,	QTY,	ITEMTOT, P.PRODID, DESCRIP FROM DEPT D, EMP E, CUSTOMER C, ORD O, ITEM I, PRODUCT P
WHERE D.DEPTNO = E.DEPTNO AND
E.EMPNO = C.REPID AND
C.CUSTID = O.CUSTID AND
O.ORDID = I.ORDID AND 
I.PRODID = P.PRODID AND
E.ENAME='MARTIN';

CREATE OR REPLACE VIEW EMP_SAL_VIEW AS SELECT EMPNO, ENAME, SAL, SAL*0.40 AS HRA, SAL * 0.30 AS DA, SAL*0.10 AS PF FROM EMP

SELECT * FROM EMP_SAL_VIEW


CREATE OR REPLACE VIEW MARTIN_VIEW AS SELECT DNAME, ENAME, NAME, O.ORDID, ORDERDATE, TOTAL, ACTUALPRICE,	QTY,	ITEMTOT, P.PRODID, DESCRIP FROM DEPT D, EMP E, CUSTOMER C, ORD O, ITEM I, PRODUCT P
WHERE D.DEPTNO = E.DEPTNO AND
E.EMPNO = C.REPID AND
C.CUSTID = O.CUSTID AND
O.ORDID = I.ORDID AND 
I.PRODID = P.PRODID AND
E.ENAME='MARTIN';


SELECT * FROM MARTIN_VIEW

SELECT * FROM ITEM    #. ORDID	ITEMID	   PRODID	ACTUALPRICE	QTY	    ITEMTOT
SELECT * FROM ORD.     # ORDID	ORDERDATE	COMMPLAN	CUSTID	SHIPDATE	TOTAL












DROP TABLE EMP 

CREATE TABLE EMP (
 EMPNO               NUMBER(4) NOT NULL,
 ENAME               VARCHAR2(10),
 JOB                 VARCHAR2(9),
 MGR                 NUMBER(4) CONSTRAINT EMP_SELF_KEY REFERENCES EMP (EMPNO),
 HIREDATE            DATE,
 SAL                 NUMBER(7,2),
 COMM                NUMBER(7,2),
 DEPTNO              NUMBER(2),
 CONSTRAINT EMP_FOREIGN_KEY FOREIGN KEY (DEPTNO) REFERENCES DEPT (DEPTNO),
 CONSTRAINT EMP_PRIMARY_KEY PRIMARY KEY (EMPNO));

INSERT INTO EMP VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-81',5000,NULL,10);
INSERT INTO EMP VALUES (7698,'BLAKE','MANAGER',7839,'1-MAY-81',2850,NULL,30);
INSERT INTO EMP VALUES (7782,'CLARK','MANAGER',7839,'9-JUN-81',2450,NULL,10);
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,'2-APR-81',2975,NULL,20);
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-81',1250,1400,30);
INSERT INTO EMP VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-81',1600,300,30);
INSERT INTO EMP VALUES (7844,'TURNER','SALESMAN',7698,'8-SEP-81',1500,0,30);
INSERT INTO EMP VALUES (7900,'JAMES','CLERK',7698,'3-DEC-81',950,NULL,30);
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO EMP VALUES (7902,'FORD','ANALYST',7566,'3-DEC-81',3000,NULL,20);
INSERT INTO EMP VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO EMP VALUES (7788,'SCOTT','ANALYST',7566,'09-DEC-82',3000,NULL,20);
INSERT INTO EMP VALUES (7876,'ADAMS','CLERK',7788,'12-JAN-83',1100,NULL,20);
INSERT INTO EMP VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);

INSERT INTO EMP VALUES (6666,'JACK','ANALYST',7782,'23-JAN-82',1300,NULL,NULL);




SELECT DNAME, ENAME, NAME, O.ORDID, ORDERDATE, TOTAL, ACTUALPRICE,	QTY,	ITEMTOT, P.PRODID, DESCRIP FROM DEPT D, EMP E, CUSTOMER C, ORD O, ITEM I, PRODUCT P
WHERE D.DEPTNO = E.DEPTNO AND
E.EMPNO = C.REPID AND
C.CUSTID = O.CUSTID AND
O.ORDID = I.ORDID AND 
I.PRODID = P.PRODID AND
E.ENAME='MARTIN';

CREATE OR REPLACE VIEW EMP_SAL_VIEW AS SELECT EMPNO, ENAME, SAL, SAL*0.40 AS HRA, SAL * 0.30 AS DA, SAL*0.10 AS PF FROM EMP

SELECT * FROM EMP_SAL_VIEW


CREATE OR REPLACE VIEW MARTIN_VIEW AS SELECT DNAME, ENAME, NAME, O.ORDID, ORDERDATE, TOTAL, ACTUALPRICE,	QTY,	ITEMTOT, P.PRODID, DESCRIP FROM DEPT D, EMP E, CUSTOMER C, ORD O, ITEM I, PRODUCT P
WHERE D.DEPTNO = E.DEPTNO AND
E.EMPNO = C.REPID AND
C.CUSTID = O.CUSTID AND
O.ORDID = I.ORDID AND 
I.PRODID = P.PRODID AND
E.ENAME='MARTIN';


SELECT * FROM MARTIN_VIEW

SELECT * FROM ITEM    #. ORDID	ITEMID	   PRODID	ACTUALPRICE	QTY	    ITEMTOT
SELECT * FROM ORD.     # ORDID	ORDERDATE	COMMPLAN	CUSTID	SHIPDATE	TOTAL












DROP TABLE EMP 

CREATE TABLE EMP (
 EMPNO               NUMBER(4) NOT NULL,
 ENAME               VARCHAR2(10),
 JOB                 VARCHAR2(9),
 MGR                 NUMBER(4) CONSTRAINT EMP_SELF_KEY REFERENCES EMP (EMPNO),
 HIREDATE            DATE,
 SAL                 NUMBER(7,2),
 COMM                NUMBER(7,2),
 DEPTNO              NUMBER(2),
 CONSTRAINT EMP_FOREIGN_KEY FOREIGN KEY (DEPTNO) REFERENCES DEPT (DEPTNO),
 CONSTRAINT EMP_PRIMARY_KEY PRIMARY KEY (EMPNO));

INSERT INTO EMP VALUES (7839,'KING','PRESIDENT',NULL,'17-NOV-81',5000,NULL,10);
INSERT INTO EMP VALUES (7698,'BLAKE','MANAGER',7839,'1-MAY-81',2850,NULL,30);
INSERT INTO EMP VALUES (7782,'CLARK','MANAGER',7839,'9-JUN-81',2450,NULL,10);
INSERT INTO EMP VALUES (7566,'JONES','MANAGER',7839,'2-APR-81',2975,NULL,20);
INSERT INTO EMP VALUES (7654,'MARTIN','SALESMAN',7698,'28-SEP-81',1250,1400,30);
INSERT INTO EMP VALUES (7499,'ALLEN','SALESMAN',7698,'20-FEB-81',1600,300,30);
INSERT INTO EMP VALUES (7844,'TURNER','SALESMAN',7698,'8-SEP-81',1500,0,30);
INSERT INTO EMP VALUES (7900,'JAMES','CLERK',7698,'3-DEC-81',950,NULL,30);
INSERT INTO EMP VALUES (7521,'WARD','SALESMAN',7698,'22-FEB-81',1250,500,30);
INSERT INTO EMP VALUES (7902,'FORD','ANALYST',7566,'3-DEC-81',3000,NULL,20);
INSERT INTO EMP VALUES (7369,'SMITH','CLERK',7902,'17-DEC-80',800,NULL,20);
INSERT INTO EMP VALUES (7788,'SCOTT','ANALYST',7566,'09-DEC-82',3000,NULL,20);
INSERT INTO EMP VALUES (7876,'ADAMS','CLERK',7788,'12-JAN-83',1100,NULL,20);
INSERT INTO EMP VALUES (7934,'MILLER','CLERK',7782,'23-JAN-82',1300,NULL,10);

INSERT INTO EMP VALUES (6666,'JACK','ANALYST',7782,'23-JAN-82',1300,NULL,NULL);


SELECT * FROM EMP
SELECT * FROM DEPT


# DDL - DATA DEFINITION LANGUAGE

# CREATE TABLE 


CONSTRAINTS
1. INTEGRITY CONSTRAINT - PRIMARY KEY = UNIQUE + NOT NULL

2. UNIQUE  - NO DUPLICATES, BUT NULL IS ALLOWED 

3. NOT NULL - NO NULL VALUE ALLOWED,  NO BLANKS,   VALUE MUST EXIST

4. CHECK - CHECK THE SALARY AGAINST A PARTICULAR NUMBER
        CHECK COMM AGAINST THE SALARY 
        
5. REFERENTIAL INTEGRITY - FOREIGN KEY - HOLD A VALUE IN IT AGAINST THE PRIMARY KEY OF SOME OTHER TABLE

APPLYING CONSTRAINTS
1. ALONG WITH THE COLUMN - COLUMN LEVEL CONSTRAINTS
2. AFTER THE COLUMN - TABLE LEVEL CONSTRAINTS

           PK
            |
EMPLOYEE.  EMPNO, ENAME, EMAIL, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO

CREATE TABLE EMP12
(
   EMPNO NUMBER PRIMARY KEY,
   ENAME VARCHAR2(20) NOT NULL,
   EMAIL VARCHAR2(20) UNIQUE,
   JOB VARCHAR2(20) CHECK (JOB IN('MANAGER','SALESMAN','CLERK','ANALYST')),
   MGR NUMBER REFERENCES EMP12,
   HIREDATE DATE CHECK (HIREDATE <= '26-DEC-2021'),
   SAL NUMBER CHECK ( SAL > 5000),
   COMM NUMBER CHECK (COMM > 500),
   DEPTNO NUMBER
 );
# DML
INSERT INTO EMP12 VALUES (1234,'JACK','jack@gmail.com','MANAGER',null,'20-DEC-2021',6000,600,NULL);
INSERT INTO EMP12 VALUES (1235,'JANE','jane@gmail.com','MANAGER',null,'20-DEC-2021',6000,600,NULL);
INSERT INTO EMP12 VALUES (1236,'PETER','peter@gmail.com','MANAGER',null,'20-DEC-2021',6000,600,NULL);
INSERT INTO EMP12 VALUES (1237,'JULIE','julie@gmail.com','MANAGER',1235,'20-DEC-2021',6000,600,NULL);
INSERT INTO EMP12 VALUES (1238,'ROBERT','robert@gmail.com','MANAGER',1235,'20-NOV-2021',6000,600,NULL);
INSERT INTO EMP12 VALUES (1239,'SMITH','smith@gmail.com','MANAGER',1237,'20-NOV-2021',7000,600,NULL);
INSERT INTO EMP12 VALUES (1240,'MILLER','miller@gmail.com','ANALYST',1239,'20-NOV-2021',7000,700,NULL);


SELECT * FROM EMP12

ORA-00001: unique constraint    (SQL_MRJJSOQUHNJLBOZVTEUFTKDWX.SYS_C0075624669) violated ORA-06512: at "SYS.DBMS_SQL", line 1721. primary key
ORA-00001: unique constraint    (SQL_MRJJSOQUHNJLBOZVTEUFTKDWX.SYS_C0075624670) violated ORA-06512: at "SYS.DBMS_SQL", line 1721. email unique key
ORA-02290: check constraint     (SQL_MRJJSOQUHNJLBOZVTEUFTKDWX.SYS_C0075624665) violated ORA-06512: at "SYS.DBMS_SQL", line 1721. job check
ORA-02291: integrity constraint (SQL_MRJJSOQUHNJLBOZVTEUFTKDWX.SYS_C0075624671) violated - parent key not found ORA-06512: at "SYS.DBMS_SQL", line 1721 - mgr check
ORA-02290: check constraint     (SQL_MRJJSOQUHNJLBOZVTEUFTKDWX.SYS_C0075624666) violated ORA-06512: at "SYS.DBMS_SQL", line 1721 - hiredate check
ORA-02290: check constraint     (SQL_MRJJSOQUHNJLBOZVTEUFTKDWX.SYS_C0075624667) violated ORA-06512: at "SYS.DBMS_SQL", line 1721 - check sal
ORA-02290: check constraint     (SQL_MRJJSOQUHNJLBOZVTEUFTKDWX.SYS_C0075624668) violated ORA-06512: at "SYS.DBMS_SQL", line 1721 - check comm

CREATE TABLE EMP13
(
   EMPNO NUMBER         constraint emp13_empno_pk           PRIMARY KEY,
   ENAME VARCHAR2(20)   constraint ename_not_null           NOT NULL,
   EMAIL VARCHAR2(20)   constraint emp13_email_not_unique   UNIQUE,
   JOB VARCHAR2(20)     constraint check_job                CHECK (JOB IN('MANAGER','SALESMAN','CLERK','ANALYST')),
   MGR NUMBER           constraint manager_key_not_found    REFERENCES EMP13,
   HIREDATE DATE        constraint check_hiredate           CHECK (HIREDATE <= '26-DEC-2021'),
   SAL NUMBER           constraint check_sal_gt_5k          CHECK ( SAL > 5000),
   COMM NUMBER          constraint check_comm_gt_500        CHECK (COMM > 500),
   DEPTNO NUMBER
 );


SELECT * FROM EMP
SELECT * FROM DEPT


CREATE TABLE EMP13
(
   EMPNO NUMBER         constraint emp13_empno_pk           PRIMARY KEY,
   ENAME VARCHAR2(20)   constraint ename_not_null           NOT NULL,
   EMAIL VARCHAR2(20)   constraint emp13_email_not_unique   UNIQUE,
   JOB VARCHAR2(20)     constraint check_job                CHECK (JOB IN('MANAGER','SALESMAN','CLERK','ANALYST')),
   MGR NUMBER           constraint manager_key_not_found    REFERENCES EMP13,
   HIREDATE DATE        constraint check_hiredate           CHECK (HIREDATE <= '26-DEC-2021'),
   SAL NUMBER           constraint check_sal_gt_5k          CHECK ( SAL > 5000),
   COMM NUMBER          constraint check_comm_gt_500        CHECK (COMM > 500),
   DEPTNO NUMBER
 );
INSERT INTO EMP13 VALUES (1235,null,'jane@gmail.com','MANAGER',null,'20-DEC-2021',6000,600,NULL);


ORA-00001: unique constraint (SQL_DWNVRSAKSUJJLOLQVJYUBVTDU.EMP13_EMPNO_PK) violated ORA-06512: at "SYS.DBMS_SQL", line 1721
ORA-00001: unique constraint (SQL_DWNVRSAKSUJJLOLQVJYUBVTDU.EMP13_EMAIL_NOT_UNIQUE) violated ORA-06512: at "SYS.DBMS_SQL", line 1721
ORA-02290: check constraint (SQL_DWNVRSAKSUJJLOLQVJYUBVTDU.CHECK_JOB) violated ORA-06512: at "SYS.DBMS_SQL", line 1721
ORA-02290: check constraint (SQL_DWNVRSAKSUJJLOLQVJYUBVTDU.CHECK_HIREDATE) violated ORA-06512: at "SYS.DBMS_SQL", line 1721
ORA-02290: check constraint (SQL_DWNVRSAKSUJJLOLQVJYUBVTDU.CHECK_SAL_GT_5K) violated ORA-06512: at "SYS.DBMS_SQL", line 1721
ORA-02290: check constraint (SQL_DWNVRSAKSUJJLOLQVJYUBVTDU.CHECK_COMM_GT_500) violated ORA-06512: at "SYS.DBMS_SQL", line 1721
ORA-02291: integrity constraint (SQL_DWNVRSAKSUJJLOLQVJYUBVTDU.MANAGER_KEY_NOT_FOUND) violated - parent key not found ORA-06512: at "SYS.DBMS_SQL", line 1721
ORA-01400: cannot insert NULL into ("SQL_DWNVRSAKSUJJLOLQVJYUBVTDU"."EMP13"."ENAME") ORA-06512: at "SYS.DBMS_SQL", line 1721


CREATE TABLE EMP15
(
   EMPNO NUMBER         constraint emp15_empno_pk           PRIMARY KEY,
   ENAME VARCHAR2(20)   constraint emp15_ename_not_null          NOT NULL,
   GENDER CHAR(1)       DEFAULT 'F',
   EMAIL VARCHAR2(20)   constraint emp15_email_not_unique   UNIQUE,
   JOB VARCHAR2(20)     constraint emp15_check_job                CHECK (JOB IN('MANAGER','SALESMAN','CLERK','ANALYST')),
   MGR NUMBER           constraint emp15_manager_key_not_found    REFERENCES EMP15,
   HIREDATE DATE        constraint emp15_check_hiredate           CHECK (HIREDATE <= '26-DEC-2021'),
   SAL NUMBER           constraint emp15_check_sal_gt_5k          CHECK ( SAL > 5000),
   COMM NUMBER          constraint emp15_check_comm_gt_500        CHECK (COMM > 500),
   DEPTNO NUMBER
 );
INSERT INTO EMP15 VALUES (1235,'JANE','F','jane@gmail.com','MANAGER',null,'20-DEC-2021',6000,600,NULL);
INSERT INTO EMP15 VALUES (1236,'JACK','M','jack@gmail.com','MANAGER',null,'20-DEC-2021',6000,600,NULL);

SELECT * FROM EMP15


INSERT INTO EMP15 (empno,ename,email,job,mgr,hiredate,sal,comm,deptno) VALUES (1239,'pop','pop@gmail.com','MANAGER',null,'20-DEC-2021',6000,600,NULL);



CREATE TABLE DEPT12
(
  DEPTNO NUMBER PRIMARY KEY,
  DNAME VARCHAR2(20) NOT NULL,
  LOC VARCHAR2(20)
 );
 
 CREATE TABLE EMP19
 (
   EMPNO NUMBER CONSTRAINT EMP19_PK PRIMARY KEY,
   ENAME VARCHAR2(20),
   SAL NUMBER check ( sal > comm) , # Column check constraint cannot reference other columns 
   com, number,
   DNO NUMBER CONSTRAINT EMP19_FK  REFERENCES DEPT12
 );

INSERT INTO DEPT12 VALUES (10,'IT','NY');
INSERT INTO DEPT12 VALUES (20,'TEST','ND');
INSERT INTO DEPT12 VALUES (30,'QMS','NJ');
INSERT INTO DEPT12 VALUES (40,'OPERATIONS','NM');
INSERT INTO EMP16 VALUES (1011,'JACK',5000,10);
INSERT INTO EMP16 VALUES (1012,'JANE',6000,10);


INSERT INTO EMP16 VALUES (1013,'JULIE',3000,20);
INSERT INTO EMP16 VALUES (1014,'JULIA',4000,20);


INSERT INTO EMP16 VALUES (1015,'JAANET',8000,30);
INSERT INTO EMP16 VALUES (1016,'JENNIE',9000,30);



SELECT * FROM EMP16


SELECT * FROM DEPT12

CREATE TABLE EMP17
(
   EMPNO NUMBER,         
   ENAME VARCHAR2(20)   constraint emp17_ename_not_null          NOT NULL,
   GENDER CHAR(1)       DEFAULT 'F',
   EMAIL VARCHAR2(20),  JOB VARCHAR2(20),    
   MGR NUMBER,          HIREDATE DATE,       
   SAL NUMBER,          COMM NUMBER,        
   DEPTNO NUMBER,
   constraint emp17_empno_pk                 PRIMARY KEY(EMPNO),
   constraint emp17_email_not_unique         UNIQUE(EMAIL),
   constraint emp17_check_job                CHECK (JOB IN('MANAGER','SALESMAN','CLERK','ANALYST')),
   constraint emp17_manager_key_not_found    FOREIGN KEY (MGR) REFERENCES EMP17,
   constraint emp17_dept_no_not_found        FOREIGN KEY (DEPTNO) REFERENCES DEPT12,
   constraint emp17_check_hiredate           CHECK (HIREDATE <= '26-DEC-2021'),
   constraint emp17_check_sal_gt_5k          CHECK ( SAL > 5000),
   constraint emp17_check_comm_gt_500        CHECK (COMM > 500),
   CONSTRAINT EMP17_CHECK_SAL_GT_COMM        check (sal > comm )
 );
 
 INSERT INTO EMP17 VALUES (1237,'JANE','F','jane7@gmail.com','MANAGER',null,'20-DEC-2021',5500,600,45);

CREATE TABLE EMP19
(
   EMPNO NUMBER,         
   ENAME VARCHAR2(20)   constraint emp19_ename_not_null          NOT NULL,
   GENDER CHAR(1)       DEFAULT 'F',
   EMAIL VARCHAR2(20),  JOB VARCHAR2(20),    
   MGR NUMBER,          HIREDATE DATE,       
   SAL NUMBER,          COMM NUMBER,        
   DEPTNO NUMBER,
   PRIMARY KEY(EMPNO),
   UNIQUE(EMAIL),
   CHECK (JOB IN('MANAGER','SALESMAN','CLERK','ANALYST')),
   FOREIGN KEY (MGR) REFERENCES EMP17,
   FOREIGN KEY (DEPTNO) REFERENCES DEPT12,
   CHECK (HIREDATE <= '26-DEC-2021'),
   CHECK ( SAL > 5000),
   CHECK (COMM > 500),
   check (sal > comm )
 );
 

CREATE TABLE DEPT13
(
  DEPTTO NUMBER PRIMARY KEY,
  DNAME VARCHAR2(20),
  SALARY NUMBER,
  LOC  VARCHAR2(20)
);

DDL
    CREATE
    RENAME
    ALTER
    TRUNCATE
    DROP
    
INSERT INTO DEPT13 VALUES (10,'IT',5000,'DELHI');

RENAME  DEPT13 TO DEPT33

SELECT * FROM DEPT33

ALTER TABLE DEPT33
RENAME COLUMN SALARY TO MAXSAL

ALTER TABLE DEPT33
ADD  MINSAL NUMBER

ALTER TABLE DEPT33
ADD  SAL NUMBER

ALTER TABLE DEPT33
DROP COLUMN SAL

ALTER TABLE DEPT33
MODIFY DNAME UNIQUE;

INSERT INTO DEPT33 VALUES (20,'QMS2',5000,'DELHI',2000);

ALTER TABLE DEPT33
disable primary key

ALTER TABLE DEPT33
enable primary key

update dept33 set deptto=40 where dname='QMS2';

alter table dept33
modify  minsal constraint check_min_sal check (minsal>1200)

INSERT INTO DEPT33 VALUES (25,'QMS4',5000,'DELHI',250);

alter table dept33
enable constraint check_min_sal

alter table dept33
drop constraint check_min_sal



# PL SQL


Procedural Language - SQL - Structured Query Language




CREATE TABLE ACCOUNT
(
   ACNO NUMBER PRIMARY KEY, ACNAME VARCHAR2(20) UNIQUE,  ACBAL NUMBER CHECK (ACBAL>0)
 );
 
 INSERT INTO ACCOUNT VALUES (101,'JACK',5000);
 INSERT INTO ACCOUNT VALUES (102,'JANE',6000);
 INSERT INTO ACCOUNT VALUES (103,'JENNIE',7000);
 INSERT INTO ACCOUNT VALUES (104,'JULIE',8000);
 INSERT INTO ACCOUNT VALUES (105,'SMITH',9000);
 
 CREATE TABLE ACCOUNT_TRANSFER
 (
     TRANS_ID NUMBER PRIMARY KEY,         TRANS_DATE DATE,
     FROM_ACC NUMBER REFERENCES ACCOUNT,  TO_ACC NUMBER REFERENCES ACCOUNT,
     CURRENT_BALNACE NUMBER,              TRANS_AMOUNT NUMBER,
     TRANS_TYPE VARCHAR2(10),             REMAINING_BALANCE NUMBER
)
SELECT * FROM ACCOUNT WHERE ACNO=101;  SELECT * FROM ACCOUNT WHERE ACNO=105;
INSERT INTO ACCOUNT_TRANSFER VALUES (1,SYSDATE, 101,105,5000,500,'DEBIT',4500);

SELECT * FROM ACCOUNT_TRANSFER


SELECT * FROM ACCOUNT


# FOR A FUND TRANSFER - WHAT ARE THE STEPS REQUIRED

1. KNOW THE SOURCE -                SELECT ACBAL FROM ACCOUNT WHERE ACNO=101
2. KNOW THE TARGET - BENEFICIARY -  SELECT ACBAL FROM ACCOUNT WHERE ACNO=105
3. THE TRANSFER AMOUNT MUST BE MORE THAN THE SOURCE BALANCE - CHECK THE SOURCE BALANCE AGANIST THE TRANSFER AMOUNT
4.                                  INSERT RECORD INTO ACCOUNT_TRANSFER TABLE TO MAKE A TRANSACTION RECORD
        TRANS_ID	TRANS_DATE	FROM_ACC	TO_ACC	CURRENT_BALNACE	TRANS_AMOUNT	TRANS_TYPE	REMAINING_BALANCE
        1	        29-DEC-21	101	        105	    5000	        500	            DEBIT	        4500
5. UPDATE THE SOURCE
                                    UPDATE ACCOUNT SET ACBAL = ACBAL - 500 WHERE ACNO=101
6. UPDATE THE TARGET
                                    UPDATE ACCOUNT SET ACBAL = ACBAL + 500 WHERE ACNO=105


SELECT * FROM ACCOUNT

begin
    dbms_output.put_line('hello pl sql1'); dbms_output.put_line('hello pl sql2');
    dbms_output.put_line('hello pl sql3'); dbms_output.put_line('hello pl sql4');
end;

DECLARE
    SOURCE_ACNO number:=102;     TARGET_ACNO number:=103;
    SOURCE_BAL NUMBER;           TARGET_BAL NUMBER;
    TRANSFER_AMT NUMBER:=4000;
BEGIN
    SELECT ACBAL INTO SOURCE_BAL FROM ACCOUNT WHERE ACNO=SOURCE_ACNO;   DBMS_OUTPUT.PUT_LINE('Source balance : ' ||SOURCE_BAL);
    
    SELECT ACBAL INTO TARGET_BAL FROM ACCOUNT WHERE ACNO=TARGET_ACNO;   DBMS_OUTPUT.PUT_LINE('Target balance : ' ||TARGET_BAL);
    
    DBMS_OUTPUT.PUT_LINE('Transfer in progres....');
    INSERT INTO ACCOUNT_TRANSFER VALUES (3,SYSDATE, SOURCE_ACNO,TARGET_ACNO,SOURCE_BAL,TRANSFER_AMT,'DEBIT',SOURCE_BAL-TRANSFER_AMT);
    UPDATE ACCOUNT SET ACBAL = ACBAL - TRANSFER_AMT WHERE ACNO=SOURCE_ACNO;
    UPDATE ACCOUNT SET ACBAL = ACBAL + TRANSFER_AMT WHERE ACNO=TARGET_ACNO;
       DBMS_OUTPUT.PUT_LINE('Transfer is successfull....');
END;

    select * from account
    
 
 select * from account_transfer


CREATE TABLE ACCOUNT
(
   ACNO NUMBER PRIMARY KEY, ACNAME VARCHAR2(20) UNIQUE,  ACBAL NUMBER CHECK (ACBAL>0)
 );
 
 INSERT INTO ACCOUNT VALUES (101,'JACK',5000);
 INSERT INTO ACCOUNT VALUES (102,'JANE',6000);
 INSERT INTO ACCOUNT VALUES (103,'JENNIE',7000);
 INSERT INTO ACCOUNT VALUES (104,'JULIE',8000);
 INSERT INTO ACCOUNT VALUES (105,'SMITH',9000);
 
 CREATE TABLE ACCOUNT_TRANSFER
 (
     TRANS_ID NUMBER PRIMARY KEY,         TRANS_DATE DATE,
     FROM_ACC NUMBER REFERENCES ACCOUNT,  TO_ACC NUMBER REFERENCES ACCOUNT,
     CURRENT_BALNACE NUMBER,              TRANS_AMOUNT NUMBER,
     TRANS_TYPE VARCHAR2(10),             REMAINING_BALANCE NUMBER
)
SELECT * FROM ACCOUNT WHERE ACNO=101;  SELECT * FROM ACCOUNT WHERE ACNO=105;
INSERT INTO ACCOUNT_TRANSFER VALUES (1,SYSDATE, 101,105,5000,500,'DEBIT',4500);

begin
    dbms_output.put_line('hello pl sql1'); dbms_output.put_line('hello pl sql2');
    dbms_output.put_line('hello pl sql3'); dbms_output.put_line('hello pl sql4');
end;

CREATE OR REPLACE PROCEDURE FUND_TRANSFER(SOURCE_ACNO IN NUMBER, TARGET_ACNO IN NUMBER, TRANSFER_AMT IN NUMBER)
AS
    SOURCE_BAL NUMBER;           
    TARGET_BAL NUMBER;
BEGIN
    SELECT ACBAL INTO SOURCE_BAL FROM ACCOUNT WHERE ACNO=SOURCE_ACNO;   DBMS_OUTPUT.PUT_LINE('Source balance : ' ||SOURCE_BAL);
    
    SELECT ACBAL INTO TARGET_BAL FROM ACCOUNT WHERE ACNO=TARGET_ACNO;   DBMS_OUTPUT.PUT_LINE('Target balance : ' ||TARGET_BAL);
    
    DBMS_OUTPUT.PUT_LINE('Transfer in progres....');
    INSERT INTO ACCOUNT_TRANSFER VALUES (3,SYSDATE, SOURCE_ACNO,TARGET_ACNO,SOURCE_BAL,TRANSFER_AMT,'DEBIT',SOURCE_BAL-TRANSFER_AMT);
    UPDATE ACCOUNT SET ACBAL = ACBAL - TRANSFER_AMT WHERE ACNO=SOURCE_ACNO;
    UPDATE ACCOUNT SET ACBAL = ACBAL + TRANSFER_AMT WHERE ACNO=TARGET_ACNO;
       DBMS_OUTPUT.PUT_LINE('Transfer is successfull....');
END;


CREATE TABLE ACCOUNT
(
   ACNO NUMBER PRIMARY KEY, ACNAME VARCHAR2(20) UNIQUE,  ACBAL NUMBER CHECK (ACBAL>0)
 );
 
 INSERT INTO ACCOUNT VALUES (101,'JACK',5000);
 INSERT INTO ACCOUNT VALUES (102,'JANE',6000);
 INSERT INTO ACCOUNT VALUES (103,'JENNIE',7000);
 INSERT INTO ACCOUNT VALUES (104,'JULIE',8000);
 INSERT INTO ACCOUNT VALUES (105,'SMITH',9000);
 
 CREATE TABLE ACCOUNT_TRANSFER
 (
     TRANS_ID NUMBER PRIMARY KEY,         TRANS_DATE DATE,
     FROM_ACC NUMBER REFERENCES ACCOUNT,  TO_ACC NUMBER REFERENCES ACCOUNT,
     CURRENT_BALNACE NUMBER,              TRANS_AMOUNT NUMBER,
     TRANS_TYPE VARCHAR2(10),             REMAINING_BALANCE NUMBER
)
SELECT * FROM ACCOUNT WHERE ACNO=101;  SELECT * FROM ACCOUNT WHERE ACNO=105;
INSERT INTO ACCOUNT_TRANSFER VALUES (1,SYSDATE, 101,105,5000,500,'DEBIT',4500);

begin
    dbms_output.put_line('hello pl sql1'); dbms_output.put_line('hello pl sql2');
    dbms_output.put_line('hello pl sql3'); dbms_output.put_line('hello pl sql4');
end;
CREATE TABLE DUMMY ( X NUMBER);         INSERT INTO DUMMY VALUES (10);
CREATE SEQUENCE MYSEQ                   SELECT MYSEQ.NEXTVAL FROM  DUMMY

CREATE OR REPLACE PROCEDURE FUND_TRANSFER ( SOURCE_ACNO IN NUMBER, TARGET_ACNO IN NUMBER, TRANSFER_AMT IN NUMBER )
AS
    SOURCE_BAL NUMBER;            TARGET_BAL NUMBER;
BEGIN
    SELECT ACBAL INTO SOURCE_BAL FROM ACCOUNT WHERE ACNO=SOURCE_ACNO;   DBMS_OUTPUT.PUT_LINE('Source balance : ' ||SOURCE_BAL);
    SELECT ACBAL INTO TARGET_BAL FROM ACCOUNT WHERE ACNO=TARGET_ACNO;   DBMS_OUTPUT.PUT_LINE('Target balance : ' ||TARGET_BAL);
    DBMS_OUTPUT.PUT_LINE('Transfer in progres....');
    INSERT INTO ACCOUNT_TRANSFER VALUES (MYSEQ.NEXTVAL,SYSDATE, SOURCE_ACNO,TARGET_ACNO,SOURCE_BAL,TRANSFER_AMT,'DEBIT',SOURCE_BAL-TRANSFER_AMT);
    UPDATE ACCOUNT SET ACBAL = ACBAL - TRANSFER_AMT WHERE ACNO=SOURCE_ACNO;
    UPDATE ACCOUNT SET ACBAL = ACBAL + TRANSFER_AMT WHERE ACNO=TARGET_ACNO;
       DBMS_OUTPUT.PUT_LINE('Transfer is successfull....');
END;

BEGIN
    FUND_TRANSFER(101,105,500);     FUND_TRANSFER(101,102,500);     FUND_TRANSFER(103,104,500);
END;
SELECT * FROM ACCOUNT;      SELECT * FROM ACCOUNT_TRANSFER

CREATE OR REPLACE PROCEDURE FUND_TRANSFER2 ( SOURCE_ACNO IN NUMBER, TARGET_ACNO IN NUMBER, TRANSFER_AMT IN NUMBER, UPDATED_SOURCE_BAL OUT NUMBER, UPDATED_TARGET_BAL OUT NUMBER )
AS
    SOURCE_BAL NUMBER;            TARGET_BAL NUMBER;
BEGIN
    SELECT ACBAL INTO SOURCE_BAL FROM ACCOUNT WHERE ACNO=SOURCE_ACNO;   DBMS_OUTPUT.PUT_LINE('Source balance : ' ||SOURCE_BAL);
    SELECT ACBAL INTO TARGET_BAL FROM ACCOUNT WHERE ACNO=TARGET_ACNO;   DBMS_OUTPUT.PUT_LINE('Target balance : ' ||TARGET_BAL);
    DBMS_OUTPUT.PUT_LINE('Transfer in progres....');
    INSERT INTO ACCOUNT_TRANSFER VALUES (MYSEQ.NEXTVAL,SYSDATE, SOURCE_ACNO,TARGET_ACNO,SOURCE_BAL,TRANSFER_AMT,'DEBIT',SOURCE_BAL-TRANSFER_AMT);
    UPDATE ACCOUNT SET ACBAL = ACBAL - TRANSFER_AMT WHERE ACNO=SOURCE_ACNO;
    UPDATE ACCOUNT SET ACBAL = ACBAL + TRANSFER_AMT WHERE ACNO=TARGET_ACNO;
    
    SELECT ACBAL INTO UPDATED_SOURCE_BAL FROM ACCOUNT WHERE ACNO=SOURCE_ACNO;
    SELECT ACBAL INTO UPDATED_TARGET_BAL FROM ACCOUNT WHERE ACNO=TARGET_ACNO;

       DBMS_OUTPUT.PUT_LINE('Transfer is successfull....');
END;

CREATE OR REPLACE PROCEDURE FUND_TRANSFER2 ( SOURCE_ACNO IN NUMBER, TARGET_ACNO IN NUMBER, TRANSFER_AMT IN NUMBER, 
                    UPDATED_SOURCE_BAL OUT NUMBER, UPDATED_TARGET_BAL OUT NUMBER )
AS
    SOURCE_BAL NUMBER;            TARGET_BAL NUMBER;
BEGIN
    SELECT ACBAL INTO SOURCE_BAL FROM ACCOUNT WHERE ACNO=SOURCE_ACNO;   SELECT ACBAL INTO TARGET_BAL FROM ACCOUNT WHERE ACNO=TARGET_ACNO;  
    DBMS_OUTPUT.PUT_LINE('Transfer in progres....');DBMS_OUTPUT.PUT_LINE('Balance at Source ....'||SOURCE_BAL); DBMS_OUTPUT.PUT_LINE('Balance at Target....'||TARGET_BAL);
    INSERT INTO ACCOUNT_TRANSFER VALUES (MYSEQ.NEXTVAL,SYSDATE, SOURCE_ACNO,TARGET_ACNO,SOURCE_BAL,TRANSFER_AMT,'DEBIT',SOURCE_BAL-TRANSFER_AMT);
    UPDATE ACCOUNT SET ACBAL = ACBAL - TRANSFER_AMT WHERE ACNO=SOURCE_ACNO;
    UPDATE ACCOUNT SET ACBAL = ACBAL + TRANSFER_AMT WHERE ACNO=TARGET_ACNO;
    SELECT ACBAL INTO UPDATED_SOURCE_BAL FROM ACCOUNT WHERE ACNO=SOURCE_ACNO; SELECT ACBAL INTO UPDATED_TARGET_BAL FROM ACCOUNT WHERE ACNO=TARGET_ACNO;
    DBMS_OUTPUT.PUT_LINE('Transfer is successfull....');
END;
DECLARE
  SRC_BAL NUMBER;       TRG_BAL NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('CURRENT VALUE OF SRC_BAL' ||SRC_BAL);DBMS_OUTPUT.PUT_LINE('CURRENT VALUE OF TRG_BAL' ||TRG_BAL);
    FUND_TRANSFER2(101,105,500, SRC_BAL, TRG_BAL);
    DBMS_OUTPUT.PUT_LINE('CURRENT VALUE OF SRC_BAL' ||SRC_BAL);DBMS_OUTPUT.PUT_LINE('CURRENT VALUE OF TRG_BAL' ||TRG_BAL);
END;

select * from account
select * from account_transfer






    

